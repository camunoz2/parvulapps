generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  grades        Grade[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Grade {
  id        Int       @id @default(autoincrement())
  classroom String
  section   String
  Students  Student[]
  teacher   User      @relation(fields: [teacherId], references: [id])
  teacherId String

  @@unique([classroom, section])
  @@index([teacherId])
}

model Student {
  id         Int         @id @default(autoincrement())
  name       String
  lastName   String
  rut        String
  Grade      Grade       @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  gradeId    Int
  Objectives Objective[]

  @@index([gradeId])
}

model Objective {
  id              Int      @id @default(autoincrement())
  description     String   @db.VarChar(500)
  level           Int // nivel 1, 2 o 3
  ParentCore      Core     @relation(fields: [parentCoreId], references: [id])
  parentCoreId    Int // pertenece a un nucleo
  firstTermScore  Int
  secondTermScore Int
  thirdTermScore  Int
  Student         Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId       Int?

  @@index([parentCoreId])
}

model Category {
  id          Int    @id
  description String
  Core        Core[]
}

model Core {
  id          Int         @id
  description String
  Objective   Objective[]
  Category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int

  @@index([categoryId])
}
